---

- name: Apply "all hosts" configs
  include_role:
    name: cloudera_manager/config
  vars:
    api_config_keys_uppercase: False
    api_config_endpoint: cm/allHosts/config
    api_configs: "{{ definition.hosts.configs }}"
  when: definition.hosts.configs is defined

- name: Check whether cluster already exists
  uri:
    url: "{{ cloudera_manager_api }}/clusters/{{ definition.cluster.name | replace(' ', '%20') }}"
    method: GET
    status_code: 200,404
    force_basic_auth: yes
    user: "{{ cloudera_manager_api_user }}"
    password: "{{ cloudera_manager_api_password }}"
    return_content: yes
  register: response

- set_fact:
    cluster_exists: "{{ response.status == 200 }}"

- block:

  - name: Detect Cloudera Manager version
    uri:
      url: "{{ cloudera_manager_api }}/cm/version"
      method: GET
      status_code: 200
      force_basic_auth: yes
      user: "{{ cloudera_manager_api_user }}"
      password: "{{ cloudera_manager_api_password }}"
      return_content: yes
    register: response

  - set_fact:
      cloudera_manager_version: "{{ response.json.version }}"
      parcel_repositories: "{{ lookup('template', 'cluster_template/repositories.j2', convert_data=False) }}"

  - name: Download parcel manifest information
    uri:
      url: "{{ item | regex_replace('/?$','/manifest.json') }}"
      status_code: 200
      body_format: json
      return_content: yes
    register: manifests
    with_items:
      - "{{ parcel_repositories }}"

  - name: Extract product details from parcel manifests
    set_fact:
      products: "{{ manifests.results | map(attribute='json') | list | extract_products_from_manifests }}"

  - name: Generate custom database configurations
    set_fact:
      configs_databases: "{{ lookup('template', 'configs/databases.j2') | from_yaml }}"

  - name: Generate custom kerberos configurations
    set_fact:
      configs_kerberos: "{{ lookup('template', 'configs/kerberos.j2') | from_yaml }}"
    when: krb5_kdc_host is defined

  - name: Generate custom log directory configurations
    set_fact:
      configs_log_dirs: "{{ lookup('template', 'configs/logdirs.j2') | from_yaml }}"
    when: definition.cluster.log_base is defined

  - name: Generate custom TLS configurations
    set_fact:
      configs_tls: "{{ lookup('template', 'configs/tls.j2') | from_yaml }}"
    when: tls

  - name: Merge all custom configurations
    set_fact:
      merged_configs: >
        {{ configs_databases | combine(
        configs_kerberos | default({}),
        configs_tls | default({}),
        configs_log_dirs | default({}),
        definition.cluster.configs, recursive=True) }}

  # note: this is for debugging purposes only and can be removed
  - name: Generate cluster template
    template:
      src: cluster_template/main.j2
      dest: /tmp/cluster_template.json

  - set_fact:
      cluster_template: "{{ lookup('template', 'cluster_template/main.j2', convert_data=False) }}"

  - name: Import cluster template
    uri:
      url: "{{ cloudera_manager_api }}/cm/importClusterTemplate?addRepositories=true"
      method: POST
      body_format: json
      body: "{{ cluster_template | to_json }}"
      status_code: 200
      force_basic_auth: yes
      user: "{{ cloudera_manager_api_user }}"
      password: "{{ cloudera_manager_api_password }}"
      return_content: yes
    register: template_resp

  - debug:
      var: template_resp
      verbosity: 2

  - set_fact:
      command_id: "{{ template_resp.json.id }}"

  - name: Wait for import cluster template command to complete
    uri:
      url: "{{ cloudera_manager_api }}/commands/{{ command_id }}"
      body_format: json
      force_basic_auth: yes
      user: "{{ cloudera_manager_api_user }}"
      password: "{{ cloudera_manager_api_password }}"
      return_content: yes
    register: result
    until: not result.json.active
    retries: 30
    delay: 60
    failed_when: "'Failed to import cluster template' in result.content"

  - debug:
      var: result
      verbosity: 2

  - name: Restart Cloudera Management Service
    uri:
      url: "{{ cloudera_manager_api }}/cm/service/commands/restart"
      method: POST
      status_code: 200
      force_basic_auth: yes
      user: "{{ cloudera_manager_api_user }}"
      password: "{{ cloudera_manager_api_password }}"
      return_content: yes
    register: start_resp
    failed_when: "'startTime' not in start_resp.content"

  when: not cluster_exists
