---

- name: Prepare directories for TLS
  file:
    state: directory
    path: "{{ item }}"
    mode: 0755
    owner: root
  with_items:
    - "{{ tls_dir_base }}"
    - "{{ tls_dir_jks }}"
    - "{{ tls_dir_x509 }}"
    - "{{ tls_dir_cacerts }}"

- set_fact:
    keystore_path: "{{ tls_dir_jks }}/{{ inventory_hostname_short }}.jks"

- name: Create JKS file
  shell: >
    {{ keytool_path }} -genkeypair -alias {{ inventory_hostname_short }}
    -keyalg RSA
    -keystore {{ keystore_path }}
    -keysize 2048
    -dname "CN={{ inventory_hostname }}"
    -ext san=dns:{{ inventory_hostname }}
    -storepass {{ tls_keystore_password }}
    -keypass {{ tls_keystore_password }}
    -storetype jks
  args:
    creates: "{{ keystore_path }}"

- name: Change permissions on JKS file
  file:
    state: file
    path: "{{ keystore_path }}"
    mode: 0644
    owner: root

- name: Verify that JKS contains a private key
  shell: >
    {{ keytool_path }} -list -keystore {{ keystore_path }}
    -alias {{ inventory_hostname_short }}
    -storepass {{ tls_keystore_password }} | grep PrivateKeyEntry

# import root/intermediate CA files

- name: Check whether an exported private key exists
  stat:
    path: "{{ tls_dir_x509 }}/{{ inventory_hostname_short }}.key"
  register: key

- name: Export temporary PKCS12 keystore
  shell: >
    {{ keytool_path }} -importkeystore
    -srckeystore {{ keystore_path }}
    -destkeystore {{ tls_dir_x509 }}/{{ inventory_hostname_short }}.p12
    -deststoretype PKCS12
    -srcstorepass {{ tls_keystore_password }}
    -srckeypass {{ tls_keystore_password }}
    -deststorepass {{ tls_keystore_password }}
    -destkeypass {{ tls_keystore_password }}
    -srcalias {{ inventory_hostname_short }}
    -destalias {{ inventory_hostname_short }}
  when: not key.stat.exists

- name: Export private key
  shell: >
    {{ openssl_path }} pkcs12
    -in {{ tls_dir_x509 }}/{{ inventory_hostname_short }}.p12
    -out {{ tls_dir_x509 }}/{{ inventory_hostname_short }}.key
    -passin pass:{{ tls_keystore_password }}
    -passout pass:{{ tls_keystore_password }}
    -nocerts
  when: not key.stat.exists

- name: Change permissions on private key
  file:
    state: file
    path: "{{ tls_dir_x509 }}/{{ inventory_hostname_short }}.key"
    mode: 0644
    owner: root

- name: Delete temporary PKCS12 keystore
  file:
    path: "{{ tls_dir_x509 }}/{{ inventory_hostname_short }}.p12"
    state: absent

- name: Write key password
  shell: "echo -n {{ tls_keystore_password }} > {{ tls_key_password_file }}"
  args:
    creates: "{{ tls_key_password_file }}"

- name: Change password permissions
  file:
    state: file
    path: "{{ tls_key_password_file }}"
    mode: 0600
    owner: root
    group: root

- name: Protect key password
  acl:
    path: "{{ tls_key_password_file }}"
    entity: "{{ item }}"
    etype: user
    permissions: r
    state: present
  with_items: "{{ key_password_acl_groups }}"

- name: Write unencrypted key
  shell: >
    {{ openssl_path }} rsa -in {{ tls_dir_x509 }}/{{ inventory_hostname_short }}.key
    -passin pass:{{ tls_keystore_password }}
    -out {{ tls_dir_x509 }}/localhost.key.unenc
  args:
    creates: "{{ tls_dir_x509 }}/localhost.key.unenc"

- name: Change permissions on unencrypted key
  file:
    state: file
    path: "{{ tls_dir_x509 }}/localhost.key.unenc"
    mode: 0600
    owner: root

# Can't do this until user accounts are available
# - name: Add ACLs to unencrypted key
#   acl:
#     path: "{{ tls_dir_x509 }}/localhost.key.unenc"
#     entity: "{{ item }}"
#     etype: user
#     permissions: r
#     state: present
#   with_items: "{{ unenc_key_acl_groups }}"
